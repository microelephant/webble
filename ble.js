const serial_cmd_report_gamepad_header = new Uint8Array([0x31]);
const serial_cmd_get_amiibo_info = new Uint8Array([0x40]);
const serial_cmd_ctrl_amiibo_clean = new Uint8Array([0x41, 0x01]);
const serial_cmd_ctrl_amiibo_update_header = new Uint8Array([0x41, 0x02]);
const serial_cmd_ctrl_amiibo_update_no_reply_header = new Uint8Array([0x41, 0x05]);
const serial_cmd_ctrl_amiibo_state = new Uint8Array([0x41, 0x03]);
const serial_cmd_ctrl_amiibo_apply = new Uint8Array([0x41, 0x04, 0x00]);


const amiibo_data_dsec_len = 32;
const amiibo_data_sig_len = 32;
const amiibo_data_data_len = 540;
const amiibo_data_fill_len = 4;
const amiibo_data_len =
  amiibo_data_dsec_len +
  amiibo_data_sig_len +
  amiibo_data_data_len +
  amiibo_data_fill_len;

const amiibo_data_num = 3;
const amiibo_data = new Array(amiibo_data_num);


amiibo_data[0] = new Uint8Array([
  // dsec Guardian|古代装备及零件
  0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6E, 0x7C, 0xE5, 0x8F, 0xA4, 0xE4, 0xBB, 0xA3, 0xE8, 
  0xA3, 0x85, 0xE5, 0xA4, 0x87, 0xE5, 0x8F, 0x8A, 0xE9, 0x9B, 0xB6, 0xE4, 0xBB, 0xB6, 0x00, 0x00,
  // sig 
  0x39, 0x22, 0x74, 0x3E, 0x04, 0xFD, 0xAF, 0xC0, 0xAB, 0x1D, 0x68, 0xCE, 0x17, 0xCC, 0x04, 0x26,
  0x53, 0x24, 0x66, 0xFE, 0x7A, 0xE5, 0xD8, 0x56, 0x87, 0xDE, 0x35, 0x22, 0x0D, 0x72, 0x90, 0xDE,
  // data
  0x04, 0x51, 0x69, 0xB4, 0x01, 0xDF, 0x2B, 0x03, 0xF6, 0x48, 0x0F, 0xE0, 0xF1, 0x10, 0xFF, 0xEE,
  0xA5, 0x00, 0x00, 0x00, 0x3B, 0x0D, 0x77, 0x36, 0xDA, 0x94, 0x83, 0x44, 0x89, 0x1A, 0x61, 0x7C,
  0x7B, 0x0E, 0x5C, 0xD0, 0x91, 0xC3, 0x5F, 0xAE, 0xB6, 0xB0, 0x2A, 0x0F, 0x4D, 0xBD, 0xD6, 0x33,
  0xBD, 0x21, 0xE5, 0x5B, 0x31, 0x24, 0x43, 0x30, 0x3C, 0x50, 0x51, 0x0D, 0x42, 0x02, 0x1E, 0x30,
  0x35, 0x72, 0x6E, 0x1E, 0x01, 0x92, 0x14, 0xC4, 0x74, 0xB8, 0x78, 0x38, 0xF2, 0x4F, 0x92, 0x80,
  0xAC, 0x27, 0xB8, 0x14, 0x01, 0x40, 0x00, 0x00, 0x03, 0x55, 0x09, 0x02, 0x0D, 0x12, 0xB6, 0x16,
  0x69, 0xE0, 0x51, 0x58, 0xBF, 0xFC, 0x9E, 0xA4, 0x9A, 0x83, 0x9D, 0xC5, 0x1D, 0xB1, 0xFF, 0x74,
  0x54, 0x0E, 0xEC, 0xD3, 0x9B, 0xB8, 0x64, 0x16, 0x74, 0x6D, 0x6D, 0xAF, 0x26, 0x5E, 0xC9, 0xE5,
  0x7A, 0xEB, 0x38, 0x36, 0x62, 0x7D, 0xF5, 0xC4, 0x73, 0x47, 0xB3, 0xB8, 0x6C, 0x4A, 0x02, 0x26,
  0x31, 0x86, 0x1F, 0x9B, 0x5A, 0xD7, 0x43, 0x55, 0x0C, 0x4A, 0xF7, 0x4F, 0x06, 0xD3, 0x52, 0xDF,
  0x46, 0xBE, 0x6C, 0xB0, 0x0A, 0x34, 0x2B, 0x3A, 0xE2, 0x58, 0xAE, 0x8C, 0x34, 0x6B, 0x39, 0x88,
  0xE8, 0x85, 0x94, 0xB4, 0x7F, 0xD0, 0x73, 0xB2, 0x9E, 0x8E, 0x99, 0xC4, 0x74, 0xBF, 0x81, 0x23,
  0xFE, 0xC6, 0x61, 0x90, 0x5B, 0xB2, 0x83, 0xAC, 0x9C, 0x8B, 0x27, 0x00, 0x2A, 0x58, 0x9D, 0x52,
  0x25, 0x35, 0xD5, 0xB6, 0xC1, 0x56, 0x4F, 0x1E, 0x75, 0xE2, 0x25, 0xAC, 0x50, 0x0A, 0x00, 0x26,
  0x3B, 0x93, 0xF4, 0x88, 0x2D, 0xE4, 0xEF, 0x5D, 0xF3, 0xA9, 0xB8, 0xAA, 0x57, 0xCA, 0x7D, 0xF3,
  0xC1, 0xB5, 0xDE, 0x6D, 0x8D, 0xF8, 0x54, 0xEB, 0x69, 0x11, 0xCC, 0x39, 0x74, 0xA9, 0xD6, 0x80,
  0x98, 0xE8, 0x83, 0x10, 0x68, 0xCB, 0x63, 0xC1, 0xA3, 0x67, 0x51, 0xEA, 0x31, 0xB2, 0x85, 0x6C,
  0x74, 0x0D, 0x09, 0x62, 0xCE, 0x4A, 0xD0, 0x8A, 0xB4, 0xBC, 0x79, 0x90, 0xC4, 0x07, 0x98, 0x9B,
  0xF8, 0x88, 0x0D, 0x15, 0xC1, 0x43, 0xAE, 0x3C, 0xF7, 0xA3, 0xD7, 0x5B, 0xF3, 0x70, 0x46, 0xCB,
  0x37, 0xE6, 0x5A, 0x00, 0x9D, 0xC1, 0x9A, 0x57, 0x68, 0xE9, 0x35, 0x55, 0x9D, 0xF0, 0x3B, 0x97,
  0x04, 0x09, 0xA4, 0xB4, 0xD9, 0xC6, 0x96, 0x76, 0xAF, 0x36, 0x7A, 0x57, 0x75, 0x1D, 0x30, 0xC9,
  0xD9, 0xBF, 0xFA, 0xB6, 0x72, 0xD3, 0x0A, 0x66, 0xB5, 0x46, 0xD4, 0x14, 0x77, 0x1C, 0xD9, 0x24,
  0x9C, 0xAE, 0xCA, 0x07, 0x19, 0x3B, 0xB8, 0x98, 0x4F, 0xBF, 0xB7, 0x6C, 0xD4, 0x5F, 0x7D, 0x4D,
  0x21, 0x32, 0x91, 0xCB, 0x3D, 0xCB, 0xC1, 0x0A, 0x79, 0x9B, 0x4D, 0x13, 0x3A, 0x02, 0x52, 0x46,
  0xC8, 0x01, 0xD6, 0x4E, 0x92, 0xFF, 0xCF, 0x22, 0x54, 0x96, 0xBD, 0xDD, 0x6C, 0xD6, 0x91, 0xEA,
  0x00, 0x0E, 0x80, 0x9C, 0xFC, 0x65, 0xA3, 0x30, 0xB0, 0x8A, 0x3A, 0x7D, 0x33, 0x97, 0x5D, 0xBB,
  0x01, 0xCA, 0x6D, 0x83, 0xBC, 0xDA, 0x8B, 0x59, 0x79, 0xC3, 0xCA, 0x98, 0xAF, 0x36, 0x49, 0x16,
  0xFE, 0x5C, 0x95, 0x3A, 0x93, 0x46, 0x4C, 0x95, 0x29, 0x2E, 0x50, 0xDD, 0xC4, 0x71, 0x13, 0xEB,
  0x81, 0x15, 0x5F, 0xE1, 0xC3, 0x4D, 0x2D, 0xE3, 0x0C, 0x59, 0x4F, 0x69, 0x8A, 0x7C, 0x58, 0xA8,
  0x50, 0xF3, 0x2D, 0x36, 0xCC, 0xC6, 0x0A, 0x68, 0x4C, 0x93, 0x32, 0x7C, 0xFE, 0x66, 0x79, 0xF5,
  0x17, 0xDE, 0x73, 0xF5, 0x9F, 0xF5, 0x05, 0xEA, 0x85, 0x39, 0x28, 0xF8, 0x55, 0x6E, 0x9E, 0xCF,
  0x65, 0xE1, 0x7E, 0x15, 0x4C, 0x97, 0x9B, 0xE2, 0xD7, 0xE3, 0xF1, 0x95, 0x8B, 0x9D, 0x61, 0x53,
  0x8D, 0xEC, 0xB7, 0xEE, 0x1B, 0x66, 0x64, 0xF2, 0x01, 0x00, 0x0F, 0xBD, 0x00, 0x00, 0x00, 0x04,
  0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]);
amiibo_data[1] = new Uint8Array([
  // dsec Soldiers|装备及补给
  0x53, 0x6F, 0x6C, 0x64, 0x69, 0x65, 0x72, 0x73, 0x7C, 0xE8, 0xA3, 0x85,	0xE5, 0xA4, 0x87, 0xE5,
  0x8F, 0x8A, 0xE8, 0xA1, 0xA5, 0xE7, 0xBB, 0x99,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // sig 
  0x99, 0x5D, 0x8F, 0xB0, 0xCD, 0x84, 0xBA, 0x78, 0xC4, 0xEE, 0x85, 0xB0, 0x07, 0x8B, 0x4A, 0xD2,
  0x49, 0xDD, 0x24, 0xDC, 0x55, 0x9F, 0x0D, 0x66, 0x3D, 0x28, 0xCF, 0x74, 0x42, 0x4B, 0xE8, 0x0A,
  // data
  0x04, 0xC0, 0x7E, 0x32, 0x01, 0xB2, 0x33, 0x03, 0x83, 0x48, 0x0F, 0xE0, 0xF1, 0x10, 0xFF, 0xEE,
  0xA5, 0x00, 0x00, 0x00, 0x90, 0x67, 0xD5, 0x3B, 0xC7, 0x65, 0x3E, 0xD8, 0xC4, 0x20, 0xB9, 0x4D,
  0x6C, 0x56, 0x2D, 0xB3, 0x2F, 0x19, 0x93, 0xD8, 0x6B, 0xCC, 0x85, 0x5F, 0x30, 0x29, 0xF2, 0x3B,
  0xCE, 0x87, 0xC2, 0x79, 0xE9, 0x86, 0x5B, 0xA0, 0xDF, 0xEB, 0x72, 0xC7, 0xFC, 0x27, 0x6D, 0xC2,
  0xE0, 0x6E, 0x6B, 0xD0, 0xB8, 0x6C, 0xB3, 0x73, 0x26, 0xAC, 0xAA, 0x34, 0x75, 0xA0, 0x62, 0x41,
  0xAA, 0xA1, 0xCA, 0x6C, 0x01, 0x41, 0x00, 0x00, 0x03, 0x5C, 0x09, 0x02, 0x0D, 0x12, 0xC6, 0x1D,
  0x60, 0xAD, 0xD4, 0xCE, 0x58, 0x08, 0x48, 0x87, 0x6F, 0x57, 0x67, 0xAA, 0xAF, 0x9F, 0xCF, 0x38,
  0xFD, 0x72, 0xC0, 0xB0, 0x56, 0x4E, 0xFA, 0x92, 0xFF, 0x6F, 0x4A, 0xF7, 0x90, 0x85, 0xBA, 0x46,
  0x21, 0x17, 0xB9, 0x1E, 0xD1, 0xA7, 0xBD, 0x34, 0xA0, 0x8B, 0x89, 0xE7, 0x3D, 0x6D, 0x16, 0xC6,
  0x24, 0xAD, 0xD6, 0xA3, 0x49, 0x49, 0x14, 0x2B, 0x8D, 0x87, 0xF7, 0x82, 0x3B, 0x51, 0x5A, 0x0F,
  0xFD, 0xB6, 0xD4, 0xF4, 0x89, 0xBC, 0xDB, 0xF0, 0xD6, 0x38, 0x85, 0xDB, 0x97, 0x6D, 0x53, 0x4E,
  0xF1, 0xC0, 0x6B, 0xDB, 0x2F, 0x76, 0x44, 0xA7, 0xC3, 0x13, 0x41, 0x98, 0x35, 0x35, 0xA7, 0x17,
  0x3A, 0x0A, 0x36, 0x85, 0xBF, 0x65, 0xBF, 0xC2, 0x3F, 0xC2, 0xFF, 0x17, 0x83, 0xC1, 0xD7, 0x4E,
  0x7C, 0xAF, 0x1E, 0xB1, 0x4E, 0xE1, 0x82, 0x24, 0x7B, 0x2E, 0x8E, 0x19, 0xF8, 0x6C, 0xA9, 0x3A,
  0x0A, 0xC1, 0xCA, 0x90, 0x08, 0xAE, 0xB8, 0xA3, 0xA1, 0x6A, 0xB8, 0xBF, 0xE0, 0xD0, 0x75, 0xF3,
  0xE1, 0xDB, 0x09, 0x1D, 0xA2, 0xC2, 0x26, 0x7B, 0x50, 0x77, 0x17, 0xFA, 0x44, 0x0A, 0x96, 0xF3,
  0x45, 0x8A, 0xBD, 0x19, 0x5B, 0x63, 0x4C, 0x14, 0xF8, 0x3B, 0x41, 0x40, 0xD4, 0x14, 0x60, 0xB0,
  0x94, 0x5D, 0x97, 0x0D, 0x00, 0x8A, 0x06, 0x0F, 0xDC, 0xC4, 0x2E, 0x45, 0x00, 0xE1, 0x25, 0x18,
  0x3B, 0x07, 0xAB, 0x4D, 0xD9, 0xDD, 0x43, 0x34, 0x0C, 0x68, 0x31, 0x24, 0xBA, 0xB5, 0x41, 0xB0,
  0xBD, 0x0E, 0x51, 0x73, 0x7A, 0x64, 0xA6, 0x73, 0xF7, 0x48, 0xB3, 0x1D, 0x8A, 0x02, 0x77, 0x81,
  0xC6, 0x08, 0x71, 0x9D, 0x53, 0x26, 0xA1, 0x6D, 0x2A, 0x74, 0x39, 0x01, 0xF1, 0xCC, 0xEB, 0x8E,
  0xB7, 0x8B, 0x33, 0x41, 0x44, 0x0B, 0x73, 0x1F, 0x0A, 0xD9, 0x4A, 0x0C, 0x13, 0xBB, 0x7D, 0x03,
  0x69, 0xD3, 0x33, 0xA3, 0x4B, 0x9B, 0xFB, 0xAE, 0x52, 0xF1, 0xC4, 0x76, 0x7F, 0x68, 0xD3, 0x62,
  0x1B, 0x25, 0xE4, 0x43, 0x13, 0x42, 0x91, 0xA7, 0x52, 0x9B, 0xB4, 0x99, 0xB7, 0xA8, 0x94, 0x97,
  0xFB, 0x74, 0x9E, 0xDA, 0x97, 0xF3, 0x13, 0x6E, 0x96, 0x82, 0xAA, 0xC3, 0xD4, 0xBD, 0xB7, 0x81,
  0x86, 0x13, 0x00, 0xF8, 0xEC, 0xD3, 0x18, 0xD5, 0x32, 0x35, 0xDD, 0x0D, 0x6C, 0x03, 0x5B, 0x3F,
  0x70, 0x30, 0x87, 0x39, 0x86, 0x64, 0x7B, 0x0B, 0xBB, 0x41, 0x9D, 0xEB, 0xC7, 0x65, 0x92, 0x55,
  0xB4, 0xFF, 0x87, 0xC1, 0xC5, 0x16, 0xC5, 0x0B, 0x9B, 0x7E, 0xBC, 0x5D, 0x96, 0x85, 0x65, 0x36,
  0xED, 0xBA, 0xBB, 0xD5, 0xEE, 0x2A, 0x1A, 0x79, 0xFE, 0x26, 0x8D, 0xAC, 0xF5, 0xBD, 0x60, 0xAE,
  0x58, 0x29, 0xB7, 0x80, 0x0A, 0x4F, 0xF6, 0x53, 0x20, 0x8F, 0x11, 0x50, 0x34, 0x32, 0x3F, 0xAE,
  0x1C, 0x2D, 0x5B, 0xE5, 0x53, 0xF2, 0x9E, 0xB4, 0x04, 0xD2, 0x71, 0x27, 0x56, 0x74, 0x93, 0xBC,
  0xDC, 0x7D, 0x53, 0x33, 0x79, 0x83, 0xD0, 0x2C, 0x14, 0x5A, 0x3E, 0x9F, 0x75, 0x94, 0x0D, 0x73,
  0x6F, 0x93, 0x07, 0x7D, 0xB6, 0x1D, 0x15, 0xF4, 0x01, 0x00, 0x0F, 0xBD, 0x00, 0x00, 0x00, 0x04,
  0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]);
amiibo_data[2] = new Uint8Array([
  // dsec Shield|各种盾牌、宝石
  0x53, 0x68, 0x69, 0x65, 0x6C, 0x64, 0x7C, 0xE5, 0x90, 0x84, 0xE7, 0xA7, 0x8D, 0xE7, 0x9B, 0xBE,
  0xE7, 0x89, 0x8C, 0xE3, 0x80, 0x81, 0xE5, 0xAE, 0x9D, 0xE7, 0x9F, 0xB3, 0x00, 0x00, 0x00, 0x00,
  // sig 
  0xCE, 0x39, 0x9B, 0xE4, 0x28, 0x29, 0xFF, 0x82, 0xDD, 0x45, 0xC4, 0x66, 0x0F, 0x61, 0x76, 0x08,
  0xC7, 0x8C, 0x0F, 0x1A, 0xBC, 0x33, 0xDA, 0x4E, 0xF0, 0x41, 0x97, 0x68, 0x62, 0x3B, 0xA8, 0x12,
  // data
  0x04, 0xB0, 0x7B, 0x47, 0x01, 0x16, 0x33, 0x03, 0x27, 0x48, 0x0F, 0xE0, 0xF1, 0x10, 0xFF, 0xEE,
  0xA5, 0x00, 0x00, 0x00, 0xBE, 0xA2, 0x8D, 0xE7, 0xE7, 0xB2, 0x66, 0x29, 0x97, 0xF0, 0x83, 0xDA,
  0xA9, 0x10, 0xD3, 0x79, 0x0D, 0x9A, 0xDD, 0x1D, 0x49, 0x93, 0x64, 0x47, 0x08, 0x3A, 0x80, 0x97,
  0x43, 0x25, 0x1D, 0xEA, 0xD2, 0x68, 0x2A, 0x42, 0x18, 0x0D, 0xE3, 0x66, 0x4E, 0xA6, 0x41, 0x05,
  0x92, 0xD2, 0xB0, 0xBA, 0x20, 0x95, 0xF2, 0xA5, 0x5B, 0xEE, 0xDC, 0xFA, 0x61, 0x64, 0x85, 0x94,
  0x8A, 0x9B, 0x06, 0x84, 0x01, 0x01, 0x00, 0x00, 0x03, 0x56, 0x09, 0x02, 0x0D, 0x12, 0xC6, 0x17,
  0x76, 0x26, 0x8F, 0x10, 0xF9, 0xFA, 0xD2, 0x8C, 0x37, 0xC9, 0xFF, 0xA2, 0x4F, 0x37, 0xFD, 0x1F,
  0x09, 0x2A, 0x27, 0xE1, 0xF7, 0xF8, 0xD9, 0x6E, 0xF1, 0x98, 0xDA, 0xBA, 0x96, 0x57, 0x20, 0xE0,
  0xE0, 0xCE, 0x9E, 0xC6, 0x3C, 0xAF, 0x02, 0xE6, 0x03, 0xCE, 0x81, 0x68, 0x0A, 0x40, 0x05, 0xF3,
  0x36, 0xA1, 0x60, 0x24, 0x3D, 0xA8, 0xB8, 0x53, 0xA9, 0xEE, 0x39, 0x3D, 0xB1, 0xC6, 0x44, 0xF9,
  0x67, 0xB0, 0x3A, 0x9D, 0xE2, 0x98, 0x93, 0xE1, 0x4C, 0xFD, 0x3A, 0xA1, 0xA8, 0x91, 0x7C, 0x3F,
  0x12, 0x80, 0xD3, 0x95, 0xD2, 0x3D, 0x9F, 0x36, 0x44, 0x2B, 0x5B, 0x24, 0xDF, 0xF9, 0x06, 0x42,
  0x91, 0xC7, 0x24, 0xB4, 0x73, 0x9D, 0x5C, 0x27, 0xAF, 0x0E, 0x55, 0x50, 0x32, 0x49, 0x60, 0x68,
  0x2B, 0xEE, 0x3A, 0xD6, 0xD6, 0xC5, 0xEB, 0xCB, 0x56, 0x30, 0x3A, 0x47, 0xA9, 0x28, 0x4B, 0x4C,
  0xD8, 0x38, 0x3D, 0x7F, 0x23, 0x98, 0x35, 0x1E, 0xC3, 0xE7, 0xD9, 0x7A, 0xBD, 0xC1, 0xD2, 0x56,
  0x69, 0x94, 0x8A, 0x43, 0x20, 0xD5, 0xFC, 0x1D, 0x35, 0x40, 0x5B, 0xD6, 0x2A, 0x4E, 0x09, 0x66,
  0x57, 0xA2, 0x27, 0xB1, 0x87, 0xA4, 0xEA, 0x70, 0xDD, 0x65, 0x72, 0x8E, 0x72, 0xC8, 0x94, 0x60,
  0x4F, 0x99, 0x7F, 0x94, 0x58, 0xB0, 0xDB, 0x52, 0x49, 0x04, 0xEF, 0xE0, 0xE6, 0xAD, 0x02, 0x63,
  0xD4, 0x6E, 0xB5, 0xE5, 0x2E, 0xE9, 0x2B, 0x5A, 0xA6, 0x1A, 0x75, 0x8F, 0xB9, 0xBD, 0xF8, 0xC0,
  0x99, 0xBF, 0x1D, 0x9D, 0x1D, 0xFC, 0xA8, 0xCB, 0x2B, 0xE3, 0xEF, 0xAB, 0x1D, 0xA5, 0xB1, 0xAA,
  0xB6, 0x67, 0xCD, 0xB6, 0xCA, 0x2B, 0x81, 0x22, 0xDE, 0x06, 0x29, 0x7C, 0x8A, 0xAA, 0x54, 0xC8,
  0x6A, 0x32, 0x05, 0x23, 0xB2, 0x03, 0x3A, 0xD4, 0xDB, 0x76, 0x9E, 0x3B, 0x70, 0xDE, 0xA9, 0x84,
  0x30, 0x52, 0x6C, 0xB9, 0xFD, 0xD2, 0x70, 0x8F, 0xB9, 0x5A, 0x55, 0x05, 0x9C, 0x37, 0xB7, 0x77,
  0x83, 0x12, 0x3D, 0x90, 0x72, 0x4E, 0x8C, 0xCE, 0x57, 0x69, 0x51, 0x2F, 0x56, 0x9D, 0xE1, 0x47,
  0xCA, 0x47, 0x4E, 0x22, 0xAE, 0x40, 0x2A, 0xBF, 0x8A, 0xDA, 0x16, 0xDC, 0xF7, 0x7B, 0xB4, 0x60,
  0x0A, 0xD6, 0xFD, 0x7E, 0x84, 0x9E, 0x1F, 0x0D, 0x0C, 0x53, 0xEA, 0xA1, 0xB5, 0xED, 0xFB, 0x49,
  0xE9, 0x44, 0x62, 0xED, 0xBA, 0xA9, 0xFD, 0x8F, 0x1B, 0x43, 0x1D, 0x33, 0xAD, 0x36, 0x74, 0xC4,
  0xFD, 0x2C, 0x45, 0xF2, 0xEC, 0xA9, 0x30, 0x2D, 0xEE, 0x39, 0xDE, 0xBA, 0xFC, 0x52, 0xCB, 0x01,
  0x34, 0x00, 0x08, 0xDA, 0x73, 0x8C, 0x91, 0x70, 0xF1, 0x4E, 0xC7, 0xD8, 0x30, 0x5A, 0x31, 0x91,
  0xFC, 0xCB, 0x23, 0xB4, 0x70, 0xAF, 0x5A, 0x7C, 0xA3, 0x49, 0x0B, 0x9D, 0x59, 0xD9, 0xEC, 0x9E,
  0xB9, 0x24, 0x2D, 0xF1, 0x5C, 0x10, 0x7F, 0xAC, 0xF1, 0xBB, 0xA9, 0x45, 0xC2, 0x18, 0xB0, 0x84,
  0x2E, 0xB7, 0x57, 0x87, 0x4D, 0x0E, 0x63, 0xCB, 0xE1, 0x40, 0x44, 0x9A, 0xAF, 0x25, 0xA0, 0x6F,
  0x18, 0x20, 0x5B, 0x88, 0x39, 0x89, 0x7E, 0x35, 0x01, 0x00, 0x0F, 0xBD, 0x00, 0x00, 0x00, 0x04,
  0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]);

var ble_device;
var serial_characteristic;

function logout(log) {
  var logarea = document.getElementById("logarea");
  logarea.value = logarea.value + "\n" + log;
  logarea.scrollTop = logarea.scrollHeight;
}

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function connect() {
  try {
    logout("Connecting to GATT Server...");
    ble_device = await navigator.bluetooth.requestDevice({
      optionalServices: [0xffe0],
      acceptAllDevices: true,
    });

    logout("Connecting to GATT Server...");
    const server = await ble_device.gatt.connect();

    logout("Getting Service...");
    const service = await server.getPrimaryService(0xffe0);

    logout("Getting Serial Service Characteristic...");
    serial_characteristic = await service.getCharacteristic(0xffe1);

    await serial_characteristic.startNotifications();

    serial_characteristic.addEventListener(
      "characteristicvaluechanged",
      serial_handleNotifications
    );

    logout("Connect: Finish");
  } catch (error) {
    logout("Argh! " + error);
  }
}

async function disconnect() {
  if (ble_device) {
    ble_device.gatt.disconnect();
    ble_device = null;
    serial_characteristic = null;
    logout("Disconnect finish");
  } else {
    logout("No Connected Device");
  }
}

async function serial_tx(data, withoutResp) {
  if (serial_characteristic == null) {
    logout("No Connected Device, stop tx");
    return;
  }
  if (withoutResp) {
    await serial_characteristic.writeValueWithoutResponse(data);
  } else {
    await serial_characteristic.writeValue(data);
  }
}

function serial_handleNotifications(event) {
  let value = event.target.value;
  let a = [];
  // Convert raw data bytes to hex values just for the sake of showing something.
  // In the "real" world, you'd use data.getUint8, data.getUint16 or even
  // TextDecoder to process raw data bytes.
  for (let i = 0; i < value.byteLength; i++) {
    a.push("0x" + ("00" + value.getUint8(i).toString(16)).slice(-2));
  }
  logout("Notify: " + Date.now() + "> " + a.join(" "));
  
  if ((value.getUint8(0) == 0x41) && (value.getUint8(1) == 0x04)) {
    if (value.getUint8(2) == 0x00) {
      logout("New Amiibo Apply Success");
    } else {
      logout("New Amiibo Apply Failed");
    }
  }
}

async function test_amiibo(amiibo_data) {
  var pkt = new Uint8Array(20);
  pkt.set(serial_cmd_ctrl_amiibo_update_no_reply_header);

  await serial_tx(serial_cmd_get_amiibo_info, false);
  await serial_tx(serial_cmd_ctrl_amiibo_clean, false);
  for (var addr = 0; addr < amiibo_data_len; addr += 16) {
    pkt.set(new Uint8Array([addr & 0xff, addr >> 8]), serial_cmd_ctrl_amiibo_update_no_reply_header.length);
    pkt.set(amiibo_data.slice(addr, addr + 16), serial_cmd_ctrl_amiibo_update_no_reply_header.length + 2);
    await serial_tx(pkt, true);
  }
  await serial_tx(serial_cmd_ctrl_amiibo_state, false);
  await serial_tx(serial_cmd_ctrl_amiibo_apply, false);
}

async function report_gamepad(min_interval, diff_max_interval) {
  var pkt = new Uint8Array(5);
  pkt.set(serial_cmd_report_gamepad_header);
  pkt.set(new Uint8Array([min_interval & 0xff, min_interval >> 8, diff_max_interval & 0xff, diff_max_interval >> 8]), serial_cmd_report_gamepad_header.length);
  await serial_tx(pkt, false);
}

async function test_gamepad_on() {
  report_gamepad(16, 256);
}

async function test_gamepad_off() {
  report_gamepad(0, 0);
}


async function test_Guardian() {
  await test_amiibo(amiibo_data[0]);
}

async function test_Soldiers() {
  await test_amiibo(amiibo_data[1]);
}

async function test_Shield() {
  await test_amiibo(amiibo_data[2]);
}
